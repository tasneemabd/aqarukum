{"ast":null,"code":"\"use client\";\n\nimport * as React from 'react';\nimport { useEffect, useMemo, useRef, useCallback } from 'react';\nimport classNames from 'classnames';\nimport useTimeout from '@restart/hooks/useTimeout';\nimport ToastFade from './ToastFade';\nimport ToastHeader from './ToastHeader';\nimport ToastBody from './ToastBody';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport ToastContext from './ToastContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Toast = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    bsPrefix,\n    className,\n    transition: Transition = ToastFade,\n    show = true,\n    animation = true,\n    delay = 5000,\n    autohide = false,\n    onClose,\n    onEntered,\n    onExit,\n    onExiting,\n    onEnter,\n    onEntering,\n    onExited,\n    bg,\n    ...props\n  } = _ref;\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'toast'); // We use refs for these, because we don't want to restart the autohide\n  // timer in case these values change.\n\n  const delayRef = useRef(delay);\n  const onCloseRef = useRef(onClose);\n  useEffect(() => {\n    delayRef.current = delay;\n    onCloseRef.current = onClose;\n  }, [delay, onClose]);\n  const autohideTimeout = useTimeout();\n  const autohideToast = !!(autohide && show);\n  const autohideFunc = useCallback(() => {\n    if (autohideToast) {\n      onCloseRef.current == null ? void 0 : onCloseRef.current();\n    }\n  }, [autohideToast]);\n  useEffect(() => {\n    // Only reset timer if show or autohide changes.\n    autohideTimeout.set(autohideFunc, delayRef.current);\n  }, [autohideTimeout, autohideFunc]);\n  const toastContext = useMemo(() => ({\n    onClose\n  }), [onClose]);\n  const hasAnimation = !!(Transition && animation);\n\n  const toast = /*#__PURE__*/_jsx(\"div\", { ...props,\n    ref: ref,\n    className: classNames(bsPrefix, className, bg && `bg-${bg}`, !hasAnimation && (show ? 'show' : 'hide')),\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\"\n  });\n\n  return /*#__PURE__*/_jsx(ToastContext.Provider, {\n    value: toastContext,\n    children: hasAnimation && Transition ? /*#__PURE__*/_jsx(Transition, {\n      in: show,\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: onExited,\n      unmountOnExit: true,\n      children: toast\n    }) : toast\n  });\n});\nToast.displayName = 'Toast';\nexport default Object.assign(Toast, {\n  Body: ToastBody,\n  Header: ToastHeader\n});","map":{"version":3,"sources":["C:/Users/NITRO/Desktop/Bonik-Ecommerice-Website-in-React/node_modules/react-bootstrap/esm/Toast.js"],"names":["React","useEffect","useMemo","useRef","useCallback","classNames","useTimeout","ToastFade","ToastHeader","ToastBody","useBootstrapPrefix","ToastContext","jsx","_jsx","Toast","forwardRef","ref","bsPrefix","className","transition","Transition","show","animation","delay","autohide","onClose","onEntered","onExit","onExiting","onEnter","onEntering","onExited","bg","props","delayRef","onCloseRef","current","autohideTimeout","autohideToast","autohideFunc","set","toastContext","hasAnimation","toast","role","Provider","value","children","in","unmountOnExit","displayName","Object","assign","Body","Header"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport { useEffect, useMemo, useRef, useCallback } from 'react';\nimport classNames from 'classnames';\nimport useTimeout from '@restart/hooks/useTimeout';\nimport ToastFade from './ToastFade';\nimport ToastHeader from './ToastHeader';\nimport ToastBody from './ToastBody';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport ToastContext from './ToastContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Toast = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  transition: Transition = ToastFade,\n  show = true,\n  animation = true,\n  delay = 5000,\n  autohide = false,\n  onClose,\n  onEntered,\n  onExit,\n  onExiting,\n  onEnter,\n  onEntering,\n  onExited,\n  bg,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'toast');\n\n  // We use refs for these, because we don't want to restart the autohide\n  // timer in case these values change.\n  const delayRef = useRef(delay);\n  const onCloseRef = useRef(onClose);\n  useEffect(() => {\n    delayRef.current = delay;\n    onCloseRef.current = onClose;\n  }, [delay, onClose]);\n  const autohideTimeout = useTimeout();\n  const autohideToast = !!(autohide && show);\n  const autohideFunc = useCallback(() => {\n    if (autohideToast) {\n      onCloseRef.current == null ? void 0 : onCloseRef.current();\n    }\n  }, [autohideToast]);\n  useEffect(() => {\n    // Only reset timer if show or autohide changes.\n    autohideTimeout.set(autohideFunc, delayRef.current);\n  }, [autohideTimeout, autohideFunc]);\n  const toastContext = useMemo(() => ({\n    onClose\n  }), [onClose]);\n  const hasAnimation = !!(Transition && animation);\n  const toast = /*#__PURE__*/_jsx(\"div\", {\n    ...props,\n    ref: ref,\n    className: classNames(bsPrefix, className, bg && `bg-${bg}`, !hasAnimation && (show ? 'show' : 'hide')),\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\"\n  });\n  return /*#__PURE__*/_jsx(ToastContext.Provider, {\n    value: toastContext,\n    children: hasAnimation && Transition ? /*#__PURE__*/_jsx(Transition, {\n      in: show,\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: onExited,\n      unmountOnExit: true,\n      children: toast\n    }) : toast\n  });\n});\nToast.displayName = 'Toast';\nexport default Object.assign(Toast, {\n  Body: ToastBody,\n  Header: ToastHeader\n});"]},"metadata":{},"sourceType":"module"}